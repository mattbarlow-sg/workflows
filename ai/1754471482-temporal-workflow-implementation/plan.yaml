version: "1.0"
plan_id: "1754471482-temporal-workflow-implementation"
plan_name: "temporal-workflow-implementation"

context:
  business_goal: "Implement a robust Temporal workflow orchestration system with Golang that supports long-running workflows, human-in-the-loop tasks, and comprehensive validation, ensuring all workflows are thoroughly tested before deployment"
  non_functional_requirements:
    - "All workflows must be validated and tested BEFORE Temporal implementation"
    - "Support for workflows spanning days to weeks with fault tolerance"
    - "Human task management with escalation capabilities"
    - "Full CLI accessibility for workflow control"
    - "Deterministic workflow execution with static analysis"
    - "Comprehensive integration and unit testing framework"

architecture:
  overview: "Multi-layered architecture with validation-first approach, leveraging existing CLI framework and BPMN types, integrated with Temporal SDK for durable workflow execution"
  adrs:
    - "docs/adr/ADR-0001-temporal-workflow.md"
  constraints:
    - "Must integrate with existing Golang codebase structure"
    - "Cannot modify existing CLI command structure"
    - "Must maintain backward compatibility with BPMN workflows"
    - "Temporal server infrastructure required"
    - "All workflows must pass determinism checks"

tooling:
  primary_language: "Go"
  secondary_languages:
    - "YAML"
    - "JSON"
  frameworks:
    - "Temporal Go SDK (go.temporal.io/sdk)"
    - "Temporal Testing Framework (go.temporal.io/sdk/testsuite)"
    - "Workflowcheck Static Analyzer"
    - "Existing CLI framework (internal/cli)"
    - "BPMN type system (internal/bpmn)"
  coding_standards:
    lint: "golangci-lint with strict rules"
    formatting: "gofmt and goimports"
    testing: "Minimum 80% code coverage, integration tests required"

entry_node: "validation-framework"

nodes:
  - id: "validation-framework"
    status: "Completed"
    materialization: 1.0
    description: "Create comprehensive validation framework for Temporal workflows"
    detailed_description: "Build a validation framework that performs static analysis, determinism checks, and pre-deployment validation of all Temporal workflows before they can be registered or deployed"
    subtasks:
      - description: "Design BPMN process for validation framework"
        completed: true
      - description: "Generate formal property specifications"
        completed: true
      - description: "Create Go schema definitions and contracts"
        completed: true
      - description: "Create internal/temporal/validator.go with ValidatorInterface"
        completed: true
      - description: "Implement determinism checker using workflowcheck"
        completed: true
      - description: "Build activity signature validator"
        completed: true
      - description: "Create workflow graph validator for cycles and connectivity"
        completed: true
      - description: "Implement timeout and retry policy validators"
        completed: true
      - description: "Add human task validation rules"
        completed: true
      - description: "Create validation result types and error reporting"
        completed: true
      - description: "Write comprehensive unit tests for validators"
        completed: true
    outputs:
      - "internal/temporal/validator.go"
      - "internal/temporal/validator_test.go"
      - "internal/temporal/validation_rules.go"
    artifacts:
      bpmn: "definitions/bpmn/temporal-validation-framework.json"
      formal_spec: "docs/specs/validation-framework.yaml"
      schemas: "src/schemas/validation-framework.schema.go"
    acceptance_criteria:
      - "All validation functions have >90% test coverage"
      - "Determinism checker correctly identifies non-deterministic code"
      - "Clear error messages for validation failures"
      - "Can validate both individual workflows and entire workflow libraries"
    definition_of_done: "Validation framework can analyze any Temporal workflow and provide comprehensive validation report with actionable feedback"
    required_knowledge:
      - "Temporal determinism requirements"
      - "Go AST analysis"
      - "Workflow graph theory"
    downstream:
      - "testing-framework"
      - "bpmn-adapter"

  - id: "testing-framework"
    status: "Completed"
    materialization: 1.0
    description: "Implement comprehensive testing framework for Temporal workflows"
    detailed_description: "Create testing infrastructure using Temporal's test suite that enables unit, integration, and end-to-end testing of workflows with time skipping and mocked activities"
    subtasks:
      - description: "Set up Temporal test environment configuration"
        completed: true
      - description: "Create test workflow factory and builders"
        completed: true
      - description: "Implement activity mocking framework"
        completed: true
      - description: "Build signal and query test helpers"
        completed: true
      - description: "Create human task simulation utilities"
        completed: true
      - description: "Implement time-skipping test scenarios"
        completed: true
      - description: "Add test coverage reporting"
        completed: true
      - description: "Create integration test suite"
        completed: true
    outputs:
      - "internal/temporal/testing/test_env.go"
      - "internal/temporal/testing/mocks.go"
      - "internal/temporal/testing/helpers.go"
      - "internal/temporal/testing/integration_test.go"
    acceptance_criteria:
      - "Can test workflows without running Temporal server"
      - "Time skipping works for long-running workflow tests"
      - "All workflow patterns have test examples"
      - "Human task scenarios can be simulated"
    definition_of_done: "Testing framework enables comprehensive testing of all workflow scenarios with clear test patterns and helpers"
    required_knowledge:
      - "Temporal test suite API"
      - "Go testing best practices"
      - "Mock generation techniques"
    downstream:
      - "temporal-client"
    artifacts:
      bpmn: null
      formal_spec: null

  - id: "bpmn-adapter"
    status: "Completed"
    materialization: 1.0
    description: "Create BPMN to Temporal workflow adapter"
    detailed_description: "Build adapter layer that converts existing BPMN workflow definitions to Temporal workflow code, mapping BPMN elements to Temporal patterns"
    subtasks:
      - description: "Generate formal property specifications"
        completed: true
      - description: "Create Go schema definitions and contracts"
        completed: true
      - description: "Create BPMN element to Temporal pattern mapping"
        completed: true
      - description: "Implement BPMN process to workflow converter"
        completed: true
      - description: "Build activity generator from BPMN tasks"
        completed: true
      - description: "Convert BPMN gateways to workflow logic"
        completed: true
      - description: "Map BPMN events to signals and timers"
        completed: true
      - description: "Handle BPMN data objects and properties"
        completed: true
      - description: "Create migration utility CLI command"
        completed: true
      - description: "Write adapter tests with sample BPMN files"
        completed: true
    outputs:
      - "internal/temporal/bpmn_adapter.go"
      - "internal/temporal/bpmn_converter.go"
      - "internal/temporal/bpmn_adapter_test.go"
      - "cmd/workflows/commands/bpmn_migrate.go"
    acceptance_criteria:
      - "Can convert all BPMN element types to Temporal patterns"
      - "Generated workflows pass validation framework"
      - "Preserves BPMN semantics in Temporal implementation"
      - "Migration command works for existing BPMN files"
    definition_of_done: "BPMN adapter successfully converts existing BPMN workflows to validated Temporal workflows"
    required_knowledge:
      - "BPMN 2.0 specification"
      - "Temporal workflow patterns"
      - "Code generation techniques"
    downstream:
      - "workflow-generator"
    artifacts:
      bpmn: null
      formal_spec: "docs/specs/bpmn-adapter.yaml"
      schemas: "src/schemas/bpmn-adapter.schema.go"

  - id: "temporal-client"
    status: "Completed"
    materialization: 1.0
    description: "Implement Temporal client and worker infrastructure"
    detailed_description: "Create Temporal client setup, worker configuration, and workflow registration system with proper connection management and error handling"
    subtasks:
      - description: "Create Temporal client configuration and setup"
        completed: true
      - description: "Implement worker pool management"
        completed: true
      - description: "Build workflow and activity registration system"
        completed: true
      - description: "Add connection retry and error handling"
        completed: true
      - description: "Implement namespace and task queue management"
        completed: true
      - description: "Create client metrics and monitoring"
        completed: true
      - description: "Add graceful shutdown handling"
        completed: true
      - description: "Write client integration tests"
        completed: true
    outputs:
      - "internal/temporal/client.go"
      - "internal/temporal/worker.go"
      - "internal/temporal/registry.go"
      - "internal/temporal/config.go"
    acceptance_criteria:
      - "Client connects reliably to Temporal server"
      - "Workers process workflows and activities correctly"
      - "Graceful shutdown preserves workflow state"
      - "Metrics are properly exported"
    definition_of_done: "Temporal client and worker infrastructure is production-ready with proper error handling and monitoring"
    required_knowledge:
      - "Temporal client configuration"
      - "Worker pool optimization"
      - "Go concurrency patterns"
    downstream:
      - "workflow-library"
    artifacts:
      bpmn: null
      formal_spec: null
      schemas: null

  - id: "workflow-generator"
    status: "Completed"
    materialization: 1.0
    description: "Build workflow generator for creating new Temporal workflows"
    detailed_description: "Create code generation system that produces validated Temporal workflow code from templates and specifications, ensuring all generated code is deterministic and follows best practices"
    subtasks:
      - description: "Design workflow template system"
        completed: true
      - description: "Create base workflow templates"
        completed: true
      - description: "Implement activity template generator"
        completed: true
      - description: "Build signal and query handler generators"
        completed: true
      - description: "Add human task pattern templates"
        completed: true
      - description: "Create workflow composition utilities"
        completed: true
      - description: "Implement validation of generated code"
        completed: true
      - description: "Write generator tests"
        completed: true
    outputs:
      - "internal/temporal/generator.go"
      - "internal/temporal/templates/"
      - "internal/temporal/generator_test.go"
    acceptance_criteria:
      - "Generated workflows pass all validation checks"
      - "Templates cover common workflow patterns"
      - "Generated code follows Go best practices"
      - "Human task patterns are correctly implemented"
    definition_of_done: "Generator produces production-ready Temporal workflow code that passes all validations"
    required_knowledge:
      - "Go code generation"
      - "Template engines"
      - "Temporal best practices"
    downstream:
      - "workflow-library"
    artifacts:
      bpmn: null
      formal_spec: null
      schemas: null

  - id: "workflow-library"
    status: "Completed"
    materialization: 1.0
    description: "Create library of reusable Temporal workflows"
    detailed_description: "Build comprehensive workflow library with common patterns including approval workflows, scheduled tasks, human-in-the-loop processes, and long-running educational workflows"
    subtasks:
      - description: "Create base workflow interfaces"
        completed: true
      - description: "Implement approval workflow pattern"
        completed: true
      - description: "Build scheduled task workflow"
        completed: true
      - description: "Create human task workflow with escalation"
        completed: true
      - description: "Implement long-running educational workflow"
        completed: true
      - description: "Add workflow composition patterns"
        completed: true
      - description: "Create workflow versioning strategy"
        completed: true
      - description: "Write workflow library tests"
        completed: true
    outputs:
      - "internal/temporal/workflows/base.go"
      - "internal/temporal/workflows/approval.go"
      - "internal/temporal/workflows/scheduled.go"
      - "internal/temporal/workflows/human_task.go"
      - "internal/temporal/workflows/educational.go"
    acceptance_criteria:
      - "All workflows are fully tested"
      - "Workflows handle edge cases and errors"
      - "Clear documentation for each workflow"
      - "Workflows are composable and reusable"
    definition_of_done: "Workflow library provides production-ready, tested workflows for common use cases"
    required_knowledge:
      - "Common workflow patterns"
      - "Temporal advanced features"
      - "Domain-specific requirements"
    downstream:
      - "human-task-system"
    artifacts:
      bpmn: "definitions/bpmn/workflow-library/"
      formal_spec: null
      schemas: null

  - id: "human-task-system"
    status: "Specified"
    materialization: 1.0
    description: "Implement human-in-the-loop task management system"
    detailed_description: "Create comprehensive system for managing human tasks including LIFO queue processing, single operator model, AI-validated proof requirements, and time-based escalation after 14 days"
    subtasks:
      - description: "Design human task data model with LIFO queue"
        completed: false
      - description: "Implement single operator assignment logic"
        completed: false
      - description: "Create LIFO task queue management"
        completed: false
      - description: "Build escalation system with 14-day timer"
        completed: false
      - description: "Implement AI proof validation integration"
        completed: false
      - description: "Add task query handlers and state machine"
        completed: false
      - description: "Create unlimited clarification cycle support"
        completed: false
      - description: "Write comprehensive human task system tests"
        completed: false
    outputs:
      - "internal/temporal/human_tasks/task_manager.go"
      - "internal/temporal/human_tasks/queue.go"
      - "internal/temporal/human_tasks/escalation.go"
      - "internal/temporal/human_tasks/notifications.go"
    acceptance_criteria:
      - "LIFO queue ordering maintained at all times"
      - "Single operator constraint enforced"
      - "Escalation triggers at exactly 14 days"
      - "AI validates all proof submissions"
      - "Unlimited clarification cycles supported"
      - "Terminal states are immutable"
      - "History provides complete audit trail"
    definition_of_done: "Human task system implements all specified invariants, state transitions, and business rules with comprehensive test coverage"
    required_knowledge:
      - "LIFO queue algorithms"
      - "State machine patterns"
      - "AI integration for validation"
      - "Temporal signal patterns"
    downstream:
      - "cli-integration"
    artifacts:
      bpmn: "definitions/bpmn/human-task-system.json"
      formal_spec: "docs/specs/human-task-system.yaml"
      schemas: "src/schemas/human-task-system.schema.go"
      test_generators: "docs/properties/human-task-system-test-specs.yaml"
      model_checking: null

  - id: "cli-integration"
    status: "Blocked"
    materialization: 0.1
    description: "Integrate Temporal workflows with existing CLI framework"
    detailed_description: "Add Temporal workflow commands to existing CLI system, providing full workflow control including starting, monitoring, and managing workflows from command line"
    subtasks:
      - description: "Create temporal command group"
        completed: false
      - description: "Implement workflow list command"
        completed: false
      - description: "Add workflow start command with inputs"
        completed: false
      - description: "Create workflow status and describe commands"
        completed: false
      - description: "Implement workflow signal command"
        completed: false
      - description: "Add workflow query command"
        completed: false
      - description: "Create workflow generate command"
        completed: false
      - description: "Implement workflow validate command"
        completed: false
    outputs:
      - "cmd/workflows/commands/temporal.go"
      - "cmd/workflows/commands/temporal_list.go"
      - "cmd/workflows/commands/temporal_start.go"
      - "cmd/workflows/commands/temporal_status.go"
      - "cmd/workflows/commands/temporal_signal.go"
    acceptance_criteria:
      - "All workflow operations available via CLI"
      - "Commands follow existing CLI patterns"
      - "Clear help text and examples"
      - "Proper error handling and reporting"
    definition_of_done: "CLI provides complete control over Temporal workflows with intuitive commands"
    required_knowledge:
      - "Existing CLI framework"
      - "Temporal client operations"
      - "Command-line UX patterns"
    downstream:
      - "integration-testing"

  - id: "integration-testing"
    status: "Blocked"
    materialization: 0.1
    description: "Perform comprehensive integration testing of entire system"
    detailed_description: "Execute full integration tests covering all components including validation, testing framework, workflow library, human tasks, CLI, and UI with production-like scenarios"
    subtasks:
      - description: "Set up integration test environment"
        completed: false
      - description: "Create end-to-end test scenarios"
        completed: false
      - description: "Test long-running workflow scenarios"
        completed: false
      - description: "Validate human task escalation flows"
        completed: false
      - description: "Test CLI command integration"
        completed: false
      - description: "Perform load and stress testing"
        completed: false
      - description: "Document test results and findings"
        completed: false
    outputs:
      - "test/integration/e2e_test.go"
      - "test/integration/scenarios/"
      - "test/integration/load_test.go"
      - "docs/test_report.md"
    acceptance_criteria:
      - "All integration tests pass"
      - "System handles load within requirements"
      - "No memory leaks or resource issues"
      - "All edge cases covered"
    definition_of_done: "System passes all integration tests and is ready for production deployment"
    required_knowledge:
      - "Integration testing strategies"
      - "Load testing tools"
      - "System monitoring"
    downstream:
      - "documentation"

  - id: "documentation"
    status: "Blocked"
    materialization: 0.1
    description: "Create comprehensive documentation for the Temporal workflow system"
    detailed_description: "Write complete documentation including architecture guides, API references, workflow patterns, deployment instructions, and operational runbooks"
    subtasks:
      - description: "Write architecture documentation"
        completed: false
      - description: "Create API reference documentation"
        completed: false
      - description: "Document workflow patterns and examples"
        completed: false
      - description: "Write deployment and configuration guide"
        completed: false
      - description: "Create operational runbook"
        completed: false
      - description: "Add troubleshooting guide"
        completed: false
      - description: "Write developer onboarding guide"
        completed: false
      - description: "Create workflow migration guide"
        completed: false
    outputs:
      - "docs/temporal/architecture.md"
      - "docs/temporal/api_reference.md"
      - "docs/temporal/workflow_patterns.md"
      - "docs/temporal/deployment.md"
      - "docs/temporal/operations.md"
    acceptance_criteria:
      - "Documentation covers all components"
      - "Clear examples for all patterns"
      - "Deployment steps are reproducible"
      - "Troubleshooting covers common issues"
    definition_of_done: "Documentation enables new developers to understand and operate the system independently"
    required_knowledge:
      - "Technical writing"
      - "System architecture"
      - "Operational best practices"
    downstream: []
